name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # common dev tools if not already in requirements-dev.txt
          pip install --upgrade pytest flake8 bandit

      - name: Lint (flake8)
        run: |
          # fail-fast if flake8 not configured; set exit 0 to avoid CI failure if you prefer warnings
          flake8 . --max-line-length=88

      - name: Security scan (bandit)
        run: |
          # scan the repository for common Python security issues
          bandit -r . -q -lll

      - name: Initialize SQLite DB (for tests)
        run: |
          # create or reset test DB and run your init_db() to create schema
          python - <<'PY'
import os
os.environ.setdefault("BLOG_DATABASE", "test_blog.db")
# Import your app module and call init_db (adjust import path if needed)
from app_secure import init_db
init_db()
print("Initialized test DB: test_blog.db")
PY

      - name: Run tests (pytest)
        env:
          FLASK_ENV: testing
          FLASK_SECRET_KEY: test-secret
          BLOG_DATABASE: test_blog.db
        run: |
          pytest -q

      - name: Upload test DB (artifact, optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-db
          path: test_blog.db
